{
  "description": "ClusterNodeResourcePolicy must be created in crane root namespace",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "scheduling.crane.io/v1alpha1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "ClusterNodeResourcePolicy"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "properties": {
        "applyMode": {
          "default": "annotation",
          "description": "ApplyMode decides how the controller to get the policy data to kubernetes node object annotation: ClusterNodeResourcePolicy controller will patch policy data \u0026 metric data to node annotation directly, do not create other NodeResourcePolicy crds crd: ClusterNodeResourcePolicy controller will create NodeResourcePolicy crds to associate with node with the same name.",
          "enum": [
            "annotation",
            "crd"
          ],
          "type": "string"
        },
        "nodeSelector": {
          "description": "NodeSelector used to select target nodes which use the same resource policy param",
          "properties": {
            "matchExpressions": {
              "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
              "items": {
                "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
                "properties": {
                  "key": {
                    "description": "key is the label key that the selector applies to.",
                    "type": "string"
                  },
                  "operator": {
                    "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
                    "type": "string"
                  },
                  "values": {
                    "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "key",
                  "operator"
                ],
                "type": "object"
              },
              "type": "array"
            },
            "matchLabels": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
              "type": "object"
            }
          },
          "type": "object"
        },
        "template": {
          "description": "Template specify the resource policy which including node resource policy and so on.",
          "properties": {
            "metadata": {
              "type": "object"
            },
            "spec": {
              "properties": {
                "autoResourceExpansion": {
                  "description": "AutoResourceExpansion is the auto resource expansion strategy, crane auto expansion the node resource",
                  "properties": {
                    "crontab": {
                      "default": "0 * * * 0-6",
                      "description": "Crontab defines the time to run scale func Default is \"0 * * * 0-6\"",
                      "type": "string"
                    },
                    "decayLife": {
                      "default": "168h",
                      "description": "DecayLife is the amount of time it takes a historical CPU/memory usage sample to lose min is 1d default is 168h (7d)",
                      "format": "duration",
                      "type": "string"
                    },
                    "maxRatios": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "MaxRatios define the max expansion ratio percent for node resource, such as cpu/memory. 150 means expansion 1.5 for the node resource capacity MaxRatios range is 1.0~infinity",
                      "type": "object"
                    },
                    "minRatios": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "MinRatios define the min expansion ratio for node resource MinRatios range is 1.0~infinity and MinRatios must less than or equal MaxRatios",
                      "type": "object"
                    },
                    "targetLoadThreshold": {
                      "description": "TargetLoadThreshold is the target utilization percent for expansion",
                      "properties": {
                        "percents": {
                          "additionalProperties": {
                            "format": "int64",
                            "type": "integer"
                          },
                          "description": "Percents such as ['cpu':60]",
                          "type": "object"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "evictLoadThreshold": {
                  "description": "EvictLoadThreshold is the trigger water level utilization percent for node will evict pod",
                  "properties": {
                    "percents": {
                      "additionalProperties": {
                        "format": "int64",
                        "type": "integer"
                      },
                      "description": "Percents such as ['cpu':60]",
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "evictTargetLoadThreshold": {
                  "description": "EvictTargetLoadThreshold is the target water level utilization percent for node will evict pods to",
                  "properties": {
                    "percents": {
                      "additionalProperties": {
                        "format": "int64",
                        "type": "integer"
                      },
                      "description": "Percents such as ['cpu':60]",
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "resourceExpansionStrategyType": {
                  "default": "static",
                  "description": "ResourceExpansionStrategy is the node resource capacity expansion strategy",
                  "enum": [
                    "static",
                    "auto"
                  ],
                  "type": "string"
                },
                "staticResourceExpansion": {
                  "description": "StaticResourceExpansion is the static resource expansion strategy, user specify the ratio of the node resource capacity expansion",
                  "properties": {
                    "ratios": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Ratios define the static expansion ratio for node resource, such as cpu/memory. 1.5 means expansion 1.5 for the node resource capacity",
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "targetLoadThreshold": {
                  "description": "TargetLoadThreshold is the target utilization percent for scheduler",
                  "properties": {
                    "percents": {
                      "additionalProperties": {
                        "format": "int64",
                        "type": "integer"
                      },
                      "description": "Percents such as ['cpu':60]",
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "targetRef": {
                  "description": "TargetRef is the target node the NodeResourcePolicy associated",
                  "properties": {
                    "apiVersion": {
                      "description": "API version of the referent",
                      "type": "string"
                    },
                    "kind": {
                      "description": "Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds\"",
                      "type": "string"
                    },
                    "name": {
                      "description": "Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names",
                      "type": "string"
                    }
                  },
                  "required": [
                    "kind",
                    "name"
                  ],
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "status": {
      "properties": {
        "conditions": {
          "description": "Conditions is the condition status of ClusterNodeResourcePolicy",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource. --- This struct is intended for direct use as an array at the field path .status.conditions.  For example, type FooStatus struct{     // Represents the observations of a foo's current state.     // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type     // +patchStrategy=merge     // +listType=map     // +listMapKey=type     Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"` \n     // other fields }",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another. This should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition. This may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date with respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition. Producers of specific condition types may define expected values and meanings for this field, and whether the values are considered a guaranteed API. The value should be a CamelCase string. This field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase. --- Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "currentNumberCreated": {
          "description": "DesiredNumberCreated is current number of created NodeResourcePolicys which associated nodes by nodeSelector",
          "type": "integer"
        },
        "desiredNumberCreated": {
          "description": "DesiredNumberCreated is desired number of created NodeResourcePolicys which associated nodes by nodeSelector",
          "type": "integer"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "scheduling.crane.io",
      "kind": "ClusterNodeResourcePolicy",
      "version": "v1alpha1"
    }
  ]
}