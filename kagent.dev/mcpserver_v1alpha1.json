{
  "description": "MCPServer is the Schema for the mcpservers API.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "kagent.dev/v1alpha1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "MCPServer"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "description": "MCPServerSpec defines the desired state of MCPServer.",
      "properties": {
        "deployment": {
          "description": "Configuration to Deploy the MCP Server using a docker container",
          "properties": {
            "args": {
              "description": "Args defines the arguments to pass to the command.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "cmd": {
              "description": "Cmd defines the command to run in the container to start the mcp server.",
              "type": "string"
            },
            "env": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Env defines the environment variables to set in the container.",
              "type": "object"
            },
            "image": {
              "description": "Image defines the container image to to deploy the MCP server.",
              "type": "string"
            },
            "port": {
              "description": "Port defines the port on which the MCP server will listen.",
              "type": "integer"
            },
            "secretRefs": {
              "description": "SecretRefs defines the list of Kubernetes secrets to reference.\nThese secrets will be mounted as volumes to the MCP server container.",
              "items": {
                "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
                "properties": {
                  "apiVersion": {
                    "description": "API version of the referent.",
                    "type": "string"
                  },
                  "fieldPath": {
                    "description": "If referring to a piece of an object instead of an entire object, this string\nshould contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2].\nFor example, if the object reference is to a container within a pod, this would take on a value like:\n\"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered\nthe event) or if no container name is specified \"spec.containers[2]\" (container with\nindex 2 in this pod). This syntax is chosen only to have some well-defined way of\nreferencing a part of an object.",
                    "type": "string"
                  },
                  "kind": {
                    "description": "Kind of the referent.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
                    "type": "string"
                  },
                  "name": {
                    "description": "Name of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
                    "type": "string"
                  },
                  "namespace": {
                    "description": "Namespace of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
                    "type": "string"
                  },
                  "resourceVersion": {
                    "description": "Specific resourceVersion to which this reference is made, if any.\nMore info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
                    "type": "string"
                  },
                  "uid": {
                    "description": "UID of the referent.\nMore info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
                    "type": "string"
                  }
                },
                "type": "object",
                "x-kubernetes-map-type": "atomic"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "httpTransport": {
          "description": "HTTPTransport defines the configuration for a Streamable HTTP transport.",
          "properties": {
            "path": {
              "description": "the target path where MCP is served",
              "type": "string"
            },
            "targetPort": {
              "description": "target port is the HTTP port that serves the MCP server.over HTTP",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "stdioTransport": {
          "description": "StdioTransport defines the configuration for a standard input/output transport.",
          "type": "object"
        },
        "transportType": {
          "description": "TransportType defines the type of mcp server being run",
          "enum": [
            "stdio",
            "http"
          ],
          "type": "string"
        }
      },
      "required": [
        "deployment"
      ],
      "type": "object"
    },
    "status": {
      "description": "MCPServerStatus defines the observed state of MCPServer.",
      "properties": {
        "conditions": {
          "description": "Conditions describe the current conditions of the MCPServer.\nImplementations should prefer to express MCPServer conditions\nusing the `MCPServerConditionType` and `MCPServerConditionReason`\nconstants so that operators and tools can converge on a common\nvocabulary to describe MCPServer state.\n\nKnown condition types are:\n\n* \"Accepted\"\n* \"ResolvedRefs\"\n* \"Programmed\"\n* \"Ready\"",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object"
          },
          "maxItems": 8,
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        },
        "observedGeneration": {
          "description": "ObservedGeneration is the most recent generation observed for this MCPServer.\nIt corresponds to the MCPServer's generation, which is updated on mutation by the API Server.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "kagent.dev",
      "kind": "MCPServer",
      "version": "v1alpha1"
    }
  ]
}