{
  "description": "AllowlistSynchronizer facilitates the management (installation, updating, deletion) of WorkloadAllowlists in a cluster.",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "auto.gke.io/v1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "AllowlistSynchronizer"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "description": "AllowlistSynchronizerSpec configures the desired list of allowlist paths to manage synchronization.",
      "properties": {
        "allowlistPaths": {
          "description": "AllowlistPaths specifies the list of paths within the bucket to synchronize",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "allowlistPaths"
      ],
      "type": "object"
    },
    "status": {
      "description": "AllowlistSynchronizerStatus defines the observed state of AllowlistSynchronizer.\nThere are two goals with exposing conditions this way:\n 1. Allow a method for other controllers or orchestration tools to determine the synchronization\n    status. For example, they should be able to wait until a Synchronizer is successful\n    before installing the associated allowlists.\n 2. Be human-readable, so that customers can check the status of their synchronizers manually,\n    and understand when further action is necessary.",
      "properties": {
        "conditions": {
          "description": "Conditions represent the latest observations of the sync status",
          "items": {
            "description": "Condition contains details for one aspect of the current state of this API Resource.\n---\nThis struct is intended for direct use as an array at the field path .status.conditions.  For example,\n\n\n\ttype FooStatus struct{\n\t    // Represents the observations of a foo's current state.\n\t    // Known .status.conditions.type are: \"Available\", \"Progressing\", and \"Degraded\"\n\t    // +patchMergeKey=type\n\t    // +patchStrategy=merge\n\t    // +listType=map\n\t    // +listMapKey=type\n\t    Conditions []metav1.Condition `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`\n\n\n\t    // other fields\n\t}",
            "properties": {
              "lastTransitionTime": {
                "description": "lastTransitionTime is the last time the condition transitioned from one status to another.\nThis should be when the underlying condition changed.  If that is not known, then using the time when the API field changed is acceptable.",
                "format": "date-time",
                "type": "string"
              },
              "message": {
                "description": "message is a human readable message indicating details about the transition.\nThis may be an empty string.",
                "maxLength": 32768,
                "type": "string"
              },
              "observedGeneration": {
                "description": "observedGeneration represents the .metadata.generation that the condition was set based upon.\nFor instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date\nwith respect to the current state of the instance.",
                "format": "int64",
                "minimum": 0,
                "type": "integer"
              },
              "reason": {
                "description": "reason contains a programmatic identifier indicating the reason for the condition's last transition.\nProducers of specific condition types may define expected values and meanings for this field,\nand whether the values are considered a guaranteed API.\nThe value should be a CamelCase string.\nThis field may not be empty.",
                "maxLength": 1024,
                "minLength": 1,
                "pattern": "^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$",
                "type": "string"
              },
              "status": {
                "description": "status of the condition, one of True, False, Unknown.",
                "enum": [
                  "True",
                  "False",
                  "Unknown"
                ],
                "type": "string"
              },
              "type": {
                "description": "type of condition in CamelCase or in foo.example.com/CamelCase.\n---\nMany .condition.type values are consistent across resources like Available, but because arbitrary conditions can be\nuseful (see .node.status.conditions), the ability to deconflict is important.\nThe regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)",
                "maxLength": 316,
                "pattern": "^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$",
                "type": "string"
              }
            },
            "required": [
              "lastTransitionTime",
              "message",
              "reason",
              "status",
              "type"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "lastSyncAttempt": {
          "description": "LastSyncAttempt is the timestamp of the last synchronization attempt",
          "format": "date-time",
          "type": "string"
        },
        "managedAllowlistStatus": {
          "description": "ManagedAllowlistStatus contains the status of each allowlist file managed by the synchronizer",
          "items": {
            "description": "ManagedAllowlistStatus represents the status of a specific allowlist file",
            "properties": {
              "filePath": {
                "description": "FilePath is the GCS path to the allowlist file",
                "type": "string"
              },
              "generation": {
                "description": "Generation is the observed generation of the allowlist file",
                "format": "int64",
                "type": "integer"
              },
              "lastError": {
                "description": "LastError describes the most recent error encountered when syncing this file, if any",
                "type": "string"
              },
              "lastSuccessfulSync": {
                "description": "LastSuccessfulSync is the last time this allowlist was successfully synchronized",
                "format": "date-time",
                "type": "string"
              },
              "phase": {
                "description": "Phase represents the current status of the allowlist (e.g., Installed, Failed, Stale)",
                "type": "string"
              }
            },
            "required": [
              "filePath",
              "phase"
            ],
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "auto.gke.io",
      "kind": "AllowlistSynchronizer",
      "version": "v1"
    }
  ]
}