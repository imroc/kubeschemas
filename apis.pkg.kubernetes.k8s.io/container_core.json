{
  "description": "Container represents a single container that is expected to be run on the host.",
  "properties": {
    "Args": {
      "description": "Optional: The container image's cmd is used if this is not provided; cannot be updated. Variable references $(VAR_NAME) are expanded using the container's environment.  If a variable cannot be resolved, the reference in the input string will be unchanged.  Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".  Escaped references will never be expanded, regardless of whether the variable exists or not.",
      "items": {
        "default": "",
        "type": "string"
      },
      "type": "array"
    },
    "Command": {
      "description": "Optional: The container image's entrypoint is used if this is not provided; cannot be updated. Variable references $(VAR_NAME) are expanded using the container's environment.  If a variable cannot be resolved, the reference in the input string will be unchanged.  Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\".  Escaped references will never be expanded, regardless of whether the variable exists or not.",
      "items": {
        "default": "",
        "type": "string"
      },
      "type": "array"
    },
    "Env": {
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/envvar_core.json",
        "default": {}
      },
      "type": "array"
    },
    "EnvFrom": {
      "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/envfromsource_core.json",
        "default": {}
      },
      "type": "array"
    },
    "Image": {
      "default": "",
      "description": "Required.",
      "type": "string"
    },
    "ImagePullPolicy": {
      "default": "",
      "description": "Required: Policy for pulling images for this container",
      "type": "string"
    },
    "Lifecycle": {
      "$ref": "../apis.pkg.kubernetes.k8s.io/lifecycle_core.json"
    },
    "LivenessProbe": {
      "$ref": "../apis.pkg.kubernetes.k8s.io/probe_core.json"
    },
    "Name": {
      "default": "",
      "description": "Required: This must be a DNS_LABEL.  Each container in a pod must have a unique name.",
      "type": "string"
    },
    "Ports": {
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/containerport_core.json",
        "default": {}
      },
      "type": "array"
    },
    "ReadinessProbe": {
      "$ref": "../apis.pkg.kubernetes.k8s.io/probe_core.json"
    },
    "ResizePolicy": {
      "description": "Resources resize policy for the container.",
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/containerresizepolicy_core.json",
        "default": {}
      },
      "type": "array"
    },
    "Resources": {
      "$ref": "../apis.pkg.kubernetes.k8s.io/resourcerequirements_core.json",
      "default": {},
      "description": "Compute resource requirements."
    },
    "RestartPolicy": {
      "description": "RestartPolicy defines the restart behavior of individual containers in a pod. This field may only be set for init containers, and the only allowed value is \"Always\". For non-init containers or when this field is not specified, the restart behavior is defined by the Pod's restart policy and the container type. Setting the RestartPolicy as \"Always\" for the init container will have the following effect: this init container will be continually restarted on exit until all regular containers have terminated. Once all regular containers have completed, all init containers with restartPolicy \"Always\" will be shut down. This lifecycle differs from normal init containers and is often referred to as a \"sidecar\" container. Although this init container still starts in the init container sequence, it does not wait for the container to complete before proceeding to the next init container. Instead, the next init container starts immediately after this init container is started, or after any startupProbe has successfully completed.",
      "type": "string"
    },
    "SecurityContext": {
      "$ref": "../apis.pkg.kubernetes.k8s.io/securitycontext_core.json",
      "description": "Optional: SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext."
    },
    "StartupProbe": {
      "$ref": "../apis.pkg.kubernetes.k8s.io/probe_core.json"
    },
    "Stdin": {
      "default": false,
      "description": "Variables for interactive containers, these have very specialized use-cases (e.g. debugging) and shouldn't be used for general purpose containers.",
      "type": "boolean"
    },
    "StdinOnce": {
      "default": false,
      "type": "boolean"
    },
    "TTY": {
      "default": false,
      "type": "boolean"
    },
    "TerminationMessagePath": {
      "default": "",
      "description": "Required.",
      "type": "string"
    },
    "TerminationMessagePolicy": {
      "default": "",
      "type": "string"
    },
    "VolumeDevices": {
      "description": "volumeDevices is the list of block devices to be used by the container.",
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/volumedevice_core.json",
        "default": {}
      },
      "type": "array"
    },
    "VolumeMounts": {
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/volumemount_core.json",
        "default": {}
      },
      "type": "array"
    },
    "WorkingDir": {
      "default": "",
      "description": "Optional: Defaults to the container runtime's default working directory.",
      "type": "string"
    }
  },
  "required": [
    "Name",
    "Image",
    "ImagePullPolicy"
  ],
  "type": "object"
}