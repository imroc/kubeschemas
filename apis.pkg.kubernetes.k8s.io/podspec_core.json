{
  "description": "PodSpec is a description of a pod",
  "properties": {
    "ActiveDeadlineSeconds": {
      "description": "Optional duration in seconds relative to the StartTime that the pod may be active on a node before the system actively tries to terminate the pod; value must be positive integer",
      "format": "int64",
      "type": "integer"
    },
    "Affinity": {
      "$ref": "../apis.pkg.kubernetes.k8s.io/affinity_core.json",
      "description": "If specified, the pod's scheduling constraints"
    },
    "AutomountServiceAccountToken": {
      "description": "AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.",
      "type": "boolean"
    },
    "Containers": {
      "description": "List of containers belonging to the pod.",
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/container_core.json",
        "default": {}
      },
      "type": "array"
    },
    "DNSConfig": {
      "$ref": "../apis.pkg.kubernetes.k8s.io/poddnsconfig_core.json",
      "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy."
    },
    "DNSPolicy": {
      "default": "",
      "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
      "type": "string"
    },
    "EnableServiceLinks": {
      "description": "EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. If not specified, the default is true.",
      "type": "boolean"
    },
    "EphemeralContainers": {
      "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource.",
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/ephemeralcontainer_core.json",
        "default": {}
      },
      "type": "array"
    },
    "HostAliases": {
      "description": "HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified.",
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/hostalias_core.json",
        "default": {}
      },
      "type": "array"
    },
    "Hostname": {
      "default": "",
      "description": "Specifies the hostname of the Pod. If not specified, the pod's hostname will be set to a system-defined value.",
      "type": "string"
    },
    "ImagePullSecrets": {
      "description": "ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use.",
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/localobjectreference_core.json",
        "default": {}
      },
      "type": "array"
    },
    "InitContainers": {
      "description": "List of initialization containers belonging to the pod.",
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/container_core.json",
        "default": {}
      },
      "type": "array"
    },
    "NodeName": {
      "default": "",
      "description": "NodeName indicates in which node this pod is scheduled. If empty, this pod is a candidate for scheduling by the scheduler defined in schedulerName. Once this field is set, the kubelet for this node becomes responsible for the lifecycle of this pod. This field should not be used to express a desire for the pod to be scheduled on a specific node. https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodename",
      "type": "string"
    },
    "NodeSelector": {
      "additionalProperties": {
        "default": "",
        "type": "string"
      },
      "description": "NodeSelector is a selector which must be true for the pod to fit on a node",
      "type": "object"
    },
    "OS": {
      "$ref": "../apis.pkg.kubernetes.k8s.io/podos_core.json",
      "description": "Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.\n\nIf the OS field is set to linux, the following fields must be unset: - securityContext.windowsOptions\n\nIf the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.hostUsers - spec.securityContext.appArmorProfile - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.securityContext.supplementalGroupsPolicy - spec.containers[*].securityContext.appArmorProfile - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup"
    },
    "Overhead": {
      "additionalProperties": {
        "$ref": "../api.pkg.apimachinery.k8s.io/quantity_resource.json"
      },
      "description": "Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead",
      "type": "object"
    },
    "PreemptionPolicy": {
      "description": "PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset.",
      "type": "string"
    },
    "Priority": {
      "description": "The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
      "format": "int32",
      "type": "integer"
    },
    "PriorityClassName": {
      "default": "",
      "description": "If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.",
      "type": "string"
    },
    "ReadinessGates": {
      "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates",
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/podreadinessgate_core.json",
        "default": {}
      },
      "type": "array"
    },
    "ResourceClaims": {
      "description": "ResourceClaims defines which ResourceClaims must be allocated and reserved before the Pod is allowed to start. The resources will be made available to those containers which consume them by name.\n\nThis is an alpha field and requires enabling the DynamicResourceAllocation feature gate.\n\nThis field is immutable.",
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/podresourceclaim_core.json",
        "default": {}
      },
      "type": "array"
    },
    "Resources": {
      "$ref": "../apis.pkg.kubernetes.k8s.io/resourcerequirements_core.json",
      "description": "Resources is the total amount of CPU and Memory resources required by all containers in the pod. It supports specifying Requests and Limits for \"cpu\" and \"memory\" resource names only. ResourceClaims are not supported.\n\nThis field enables fine-grained control over resource allocation for the entire pod, allowing resource sharing among containers in a pod.\n\nThis is an alpha field and requires enabling the PodLevelResources feature gate."
    },
    "RestartPolicy": {
      "default": "",
      "type": "string"
    },
    "RuntimeClassName": {
      "description": "RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class",
      "type": "string"
    },
    "SchedulerName": {
      "default": "",
      "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
      "type": "string"
    },
    "SchedulingGates": {
      "description": "SchedulingGates is an opaque list of values that if specified will block scheduling the pod. If schedulingGates is not empty, the pod will stay in the SchedulingGated state and the scheduler will not attempt to schedule the pod.\n\nSchedulingGates can only be set at pod creation time, and be removed only afterwards.",
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/podschedulinggate_core.json",
        "default": {}
      },
      "type": "array"
    },
    "SecurityContext": {
      "$ref": "../apis.pkg.kubernetes.k8s.io/podsecuritycontext_core.json",
      "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field."
    },
    "ServiceAccountName": {
      "default": "",
      "description": "ServiceAccountName is the name of the ServiceAccount to use to run this pod The pod will be allowed to use secrets referenced by the ServiceAccount",
      "type": "string"
    },
    "SetHostnameAsFQDN": {
      "description": "If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\Tcpip\\\\Parameters to FQDN. If a pod does not have FQDN, this has no effect.",
      "type": "boolean"
    },
    "Subdomain": {
      "default": "",
      "description": "If specified, the fully qualified Pod hostname will be \"\u003chostname\u003e.\u003csubdomain\u003e.\u003cpod namespace\u003e.svc.\u003ccluster domain\u003e\". If not specified, the pod will not have a domainname at all.",
      "type": "string"
    },
    "TerminationGracePeriodSeconds": {
      "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.",
      "format": "int64",
      "type": "integer"
    },
    "Tolerations": {
      "description": "If specified, the pod's tolerations.",
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/toleration_core.json",
        "default": {}
      },
      "type": "array"
    },
    "TopologySpreadConstraints": {
      "description": "TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.",
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/topologyspreadconstraint_core.json",
        "default": {}
      },
      "type": "array"
    },
    "Volumes": {
      "items": {
        "$ref": "../apis.pkg.kubernetes.k8s.io/volume_core.json",
        "default": {}
      },
      "type": "array"
    }
  },
  "required": [
    "Volumes",
    "InitContainers",
    "Containers",
    "ServiceAccountName"
  ],
  "type": "object"
}