{
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "networking.alibabacloud.com/v1beta1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "CustomDNSConfig"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "description": "CustomDNSConfigSpec Defines the desired config of CoreDNS",
      "properties": {
        "zones": {
          "items": {
            "properties": {
              "forward": {
                "properties": {
                  "policy": {
                    "default": "Random",
                    "description": "policy is used to determine the order in which upstream servers are selected for querying.\nAny one of the following values may be specified:\n\n* \"Random\" picks a random upstream server for each query.\n* \"RoundRobin\" picks upstream servers in a round-robin order, moving to the next server for each new query.\n* \"Sequential\" tries querying upstream servers in a sequential order until one responds, starting with the first server for each new query.\n\nThe default value is \"Random\"",
                    "enum": [
                      "Random",
                      "RoundRobin",
                      "Sequential"
                    ],
                    "type": "string"
                  },
                  "protocolStrategy": {
                    "description": "protocolStrategy specifies the protocol to use for upstream DNS\nrequests.\nValid values for protocolStrategy are \"TCP\" and omitted.\nWhen omitted, this means no opinion and the platform is left to choose\na reasonable default, which is subject to change over time.\nThe current default is to use the protocol of the original client request.\n\"TCP\" specifies that the platform should use TCP for all upstream DNS requests,\neven if the client request uses UDP.\n\"TCP\" is useful for UDP-specific issues such as those created by\nnon-compliant upstream resolvers, but may consume more bandwidth or\nincrease DNS response time. Note that protocolStrategy only affects\nthe protocol of DNS requests that CoreDNS makes to upstream resolvers.\nIt does not affect the protocol of DNS requests between clients and\nCoreDNS.",
                    "enum": [
                      "TCP",
                      ""
                    ],
                    "type": "string"
                  },
                  "transportConfig": {
                    "description": "transportConfig is used to configure the transport type, server name, and optional custom CA or CA bundle to use\nwhen forwarding DNS requests to an upstream resolver.\n\nThe default value is \"\" (empty) which results in a standard cleartext connection being used when forwarding DNS\nrequests to an upstream resolver.",
                    "properties": {
                      "tls": {
                        "description": "tls contains the additional configuration options to use when Transport is set to \"TLS\".",
                        "properties": {
                          "caBundle": {
                            "description": "caBundle references a ConfigMap that must contain either a single\nCA Certificate or a CA Bundle. This allows cluster administrators to provide their\nown CA or CA bundle for validating the certificate of upstream resolvers.\n\n1. The configmap must contain a `ca-bundle.crt` key.\n2. The value must be a PEM encoded CA certificate or CA bundle.\n3. The administrator must create this configmap in the openshift-config namespace.\n4. The upstream server certificate must contain a Subject Alternative Name (SAN) that matches ServerName.",
                            "properties": {
                              "name": {
                                "description": "name is the metadata.name of the referenced config map",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name"
                            ],
                            "type": "object"
                          },
                          "serverName": {
                            "description": "serverName is the upstream server to connect to when forwarding DNS queries. This is required when Transport is\nset to \"TLS\". ServerName will be validated against the DNS naming conventions in RFC 1123 and should match the\nTLS certificate installed in the upstream resolver(s).",
                            "maxLength": 253,
                            "pattern": "^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])(\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9]))*$",
                            "type": "string"
                          }
                        },
                        "required": [
                          "serverName"
                        ],
                        "type": "object"
                      },
                      "transport": {
                        "description": "transport allows cluster administrators to opt-in to using a DNS-over-TLS\nconnection between cluster DNS and an upstream resolver(s). Configuring\nTLS as the transport at this level without configuring a CABundle will\nresult in the system certificates being used to verify the serving\ncertificate of the upstream resolver(s).\n\nPossible values:\n\"\" (empty) - This means no explicit choice has been made and the platform chooses the default which is subject\nto change over time. The current default is \"Cleartext\".\n\"Cleartext\" - Cluster admin specified cleartext option. This results in the same functionality\nas an empty value but may be useful when a cluster admin wants to be more explicit about the transport,\nor wants to switch from \"TLS\" to \"Cleartext\" explicitly.\n\"TLS\" - This indicates that DNS queries should be sent over a TLS connection. If Transport is set to TLS,\nyou MUST also set ServerName. If a port is not included with the upstream IP, port 853 will be tried by default\nper RFC 7858 section 3.1; https://datatracker.ietf.org/doc/html/rfc7858#section-3.1.",
                        "enum": [
                          "TLS",
                          "Cleartext",
                          ""
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "upstreams": {
                    "description": "upstreams is a list of resolvers to forward name queries for subdomains of Zones.\nEach instance of CoreDNS performs health checking of Upstreams. When a healthy upstream\nreturns an error during the exchange, another resolver is tried from Upstreams. The\nUpstreams are selected in the order specified in Policy. Each upstream is represented\nby an IP address or IP:port if the upstream listens on a port other than 53.\n\nA maximum of 15 upstreams is allowed per ForwardPlugin.",
                    "items": {
                      "description": "Upsteam can be an IPv4 address or an IPv4 address with Port like \"192.168.1.12:53\"",
                      "pattern": "^(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)(:[1-9][0-9]{0,3}|:[1-5][0-9]{4}|:6[0-4][0-9]{3}|:65[0-4][0-9]{2}|:655[0-2][0-9]|:6553[0-5])?$",
                      "type": "string"
                    },
                    "maxItems": 15,
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "hosts": {
                "items": {
                  "properties": {
                    "hostName": {
                      "description": "HostName is the fully qualified domain name of a network host. This matches\nthe RFC 1123 definition of a hostname with 2 notable exceptions:\n\n 1. IPs are not allowed.\n 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard\n    label must appear by itself as the first label.\n\nHostName can be \"precise\" which is a domain name without the terminating\ndot of a network host (e.g. \"foo.example.com\") or \"wildcard\", which is a\ndomain name prefixed with a single wildcard label (e.g. `*.example.com`).\n\nNote that as per RFC1035 and RFC1123, a *label* must consist of lower case\nalphanumeric characters or '-', and must start and end with an alphanumeric\ncharacter. No other punctuation is allowed.",
                      "maxLength": 253,
                      "minLength": 1,
                      "pattern": "^(\\*\\.)?[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$",
                      "type": "string"
                    },
                    "ipAddress": {
                      "description": "IPAddress is used for validation of an IPv4 address.",
                      "format": "ipv4",
                      "maxLength": 253,
                      "minLength": 1,
                      "type": "string"
                    }
                  },
                  "required": [
                    "hostName",
                    "ipAddress"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "name": {
                "description": "Zone Name should be a valid Domain or \".\"\n\".\" is the default zone specially\nDomain can have a variety of forms, including RFC 1123 subdomains,\nRFC 1123 labels, or RFC 1035 labels.\n\nThis validation is based off of the corresponding Kubernetes validation:\nhttps://github.com/kubernetes/apimachinery/blob/02cfb53916346d085a6c6c7c66f882e3c6b0eca6/pkg/util/validation/validation.go#L208\n\nValid values include:\n\n* \"example\"\n* \"foo-example\"\n* \"example.com\"\n* \"foo.example.com\"\n\nInvalid values include:\n\n* \"example.com/bar\" - \"/\" is an invalid character\n* \"*.test.com\" - \"*\" is an invalid character",
                "maxLength": 253,
                "minLength": 1,
                "pattern": "^(\\.|[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*)$",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "zones"
      ],
      "type": "object"
    },
    "status": {
      "description": "CustomDNSConfigStatus defines the observed state of CustomDNSConfig",
      "properties": {
        "corefile": {
          "description": "Corefile is the corresponding CoreDNS config which generated by controller",
          "type": "string"
        },
        "corefileHash": {
          "description": "Corefile version",
          "type": "string"
        },
        "lastTransitionTime": {
          "format": "date-time",
          "type": "string"
        },
        "message": {
          "description": "A human-readable message indicating details about the transition.",
          "type": "string"
        },
        "phase": {
          "description": "DnsConfigPhase is the current observed phase of the CustomDNSConfig",
          "enum": [
            "GenerateFailed",
            "GenerateSuccess",
            "NotSupported",
            "Deleted"
          ],
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        }
      },
      "required": [
        "corefile",
        "corefileHash",
        "phase"
      ],
      "type": "object"
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "networking.alibabacloud.com",
      "kind": "CustomDNSConfig",
      "version": "v1beta1"
    }
  ]
}