{
  "description": "allows customize `clickhouse-operator` settings, need restart clickhouse-operator pod after adding, more details https://github.com/Altinity/clickhouse-operator/blob/master/docs/operator_configuration.md",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "enum": [
        "clickhouse.altinity.com/v1"
      ],
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "enum": [
        "ClickHouseOperatorConfiguration"
      ],
      "type": "string"
    },
    "metadata": {
      "allOf": [
        {
          "$ref": "../meta.apis.pkg.apimachinery.k8s.io/objectmeta_v1.json"
        }
      ],
      "description": "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
    },
    "spec": {
      "description": "Allows to define settings of the clickhouse-operator.\nMore info: https://github.com/Altinity/clickhouse-operator/blob/master/config/config.yaml\nCheck into etc-clickhouse-operator* ConfigMaps if you need more control\n",
      "properties": {
        "annotation": {
          "properties": {
            "exclude": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "include": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "clickhouse": {
          "properties": {
            "access": {
              "properties": {
                "password": {
                  "description": "ClickHouse password to be used by operator to connect to ClickHouse instances, deprecated, use chCredentialsSecretName",
                  "type": "string"
                },
                "port": {
                  "description": "port to be used by operator to connect to ClickHouse instances",
                  "maximum": 65535,
                  "minimum": 1,
                  "type": "integer"
                },
                "secret": {
                  "properties": {
                    "name": {
                      "description": "Name of k8s Secret with username and password to be used by operator to connect to ClickHouse instances",
                      "type": "string"
                    },
                    "namespace": {
                      "description": "Location of k8s Secret with username and password to be used by operator to connect to ClickHouse instances",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "username": {
                  "description": "ClickHouse username to be used by operator to connect to ClickHouse instances, deprecated, use chCredentialsSecretName",
                  "type": "string"
                }
              },
              "type": "object"
            },
            "configuration": {
              "properties": {
                "file": {
                  "properties": {
                    "path": {
                      "properties": {
                        "common": {
                          "description": "Path to the folder where ClickHouse configuration files common for all instances within a CHI are located. Default - config.d",
                          "type": "string"
                        },
                        "host": {
                          "description": "Path to the folder where ClickHouse configuration files unique for each instance (host) within a CHI are located. Default - conf.d",
                          "type": "string"
                        },
                        "user": {
                          "description": "Path to the folder where ClickHouse configuration files with users settings are located. Files are common for all instances within a CHI.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "network": {
                  "properties": {
                    "hostRegexpTemplate": {
                      "description": "ClickHouse server configuration `\u003chost_regexp\u003e...\u003c/host_regexp\u003e` for any \u003cuser\u003e",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "user": {
                  "properties": {
                    "default": {
                      "properties": {
                        "networksIP": {
                          "description": "ClickHouse server configuration `\u003cnetworks\u003e\u003cip\u003e...\u003c/ip\u003e\u003c/networks\u003e` for any \u003cuser\u003e",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "password": {
                          "description": "ClickHouse server configuration `\u003cpassword\u003e...\u003c/password\u003e` for any \u003cuser\u003e",
                          "type": "string"
                        },
                        "profile": {
                          "description": "ClickHouse server configuration `\u003cprofile\u003e...\u003c/profile\u003e` for any \u003cuser\u003e",
                          "type": "string"
                        },
                        "quota": {
                          "description": "ClickHouse server configuration `\u003cquota\u003e...\u003c/quota\u003e` for any \u003cuser\u003e",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "label": {
          "properties": {
            "appendScope": {
              "description": "Whether to append *Scope* labels to StatefulSet and Pod\n- \"LabelShardScopeIndex\"\n- \"LabelReplicaScopeIndex\"\n- \"LabelCHIScopeIndex\"\n- \"LabelCHIScopeCycleSize\"\n- \"LabelCHIScopeCycleIndex\"\n- \"LabelCHIScopeCycleOffset\"\n- \"LabelClusterScopeIndex\"\n- \"LabelClusterScopeCycleSize\"\n- \"LabelClusterScopeCycleIndex\"\n- \"LabelClusterScopeCycleOffset\"\n",
              "enum": [
                "",
                "0",
                "1",
                "False",
                "false",
                "True",
                "true",
                "No",
                "no",
                "Yes",
                "yes",
                "Off",
                "off",
                "On",
                "on",
                "Disable",
                "disable",
                "Enable",
                "enable",
                "Disabled",
                "disabled",
                "Enabled",
                "enabled"
              ],
              "type": "string"
            },
            "exclude": {
              "description": "When propagating labels from the chi's `metadata.labels` section to child objects' `metadata.labels`,\nexclude labels from the following list\n",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "include": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        },
        "logger": {
          "properties": {
            "alsologtostderr": {
              "description": "boolean allows logs to stderr and files both",
              "type": "string"
            },
            "log_backtrace_at": {
              "description": "It can be set to a file and line number with a logging line.\nEx.: file.go:123\nEach time when this line is being executed, a stack trace will be written to the Info log.\n",
              "type": "string"
            },
            "logtostderr": {
              "description": "boolean, allows logs to stderr",
              "type": "string"
            },
            "stderrthreshold": {
              "type": "string"
            },
            "v": {
              "description": "verbosity level of clickhouse-operator log, default - 1 max - 9",
              "type": "string"
            },
            "vmodule": {
              "description": "Comma-separated list of filename=N, where filename (can be a pattern) must have no .go ext, and N is a V level.\nEx.: file*=2 sets the 'V' to 2 in all files with names like file*.\n",
              "type": "string"
            }
          },
          "type": "object"
        },
        "pod": {
          "properties": {
            "terminationGracePeriod": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "reconcile": {
          "properties": {
            "host": {
              "properties": {
                "wait": {
                  "properties": {
                    "exclude": {
                      "type": "boolean"
                    },
                    "include": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            },
            "runtime": {
              "properties": {
                "threadsNumber": {
                  "description": "How many goroutines will be used to reconcile in parallel, 10 by default",
                  "maximum": 65535,
                  "minimum": 1,
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "statefulSet": {
              "properties": {
                "create": {
                  "properties": {
                    "onFailure": {
                      "description": "What to do in case created StatefulSet is not in Ready after `statefulSetUpdateTimeout` seconds\nPossible options:\n1. abort - do nothing, just break the process and wait for admin.\n2. delete - delete newly created problematic StatefulSet.\n3. ignore (default) - ignore error, pretend nothing happened and move on to the next StatefulSet.\n",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "update": {
                  "properties": {
                    "onFailure": {
                      "description": "What to do in case updated StatefulSet is not in Ready after `statefulSetUpdateTimeout` seconds\nPossible options:\n1. abort - do nothing, just break the process and wait for admin.\n2. rollback (default) - delete Pod and rollback StatefulSet to previous Generation. Pod would be recreated by StatefulSet based on rollback-ed configuration.\n3. ignore - ignore error, pretend nothing happened and move on to the next StatefulSet.\n",
                      "type": "string"
                    },
                    "pollInterval": {
                      "description": "How many seconds to wait between checks for created/updated StatefulSet status",
                      "type": "integer"
                    },
                    "timeout": {
                      "description": "How many seconds to wait for created/updated StatefulSet to be Ready",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "statefulSet": {
          "properties": {
            "revisionHistoryLimit": {
              "type": "integer"
            }
          },
          "type": "object"
        },
        "template": {
          "properties": {
            "chi": {
              "properties": {
                "path": {
                  "description": "Path to folder where ClickHouseInstallationTemplate .yaml manifests are located.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "watch": {
          "properties": {
            "namespaces": {
              "description": "List of namespaces where clickhouse-operator watches for events.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      },
      "type": "object",
      "x-kubernetes-preserve-unknown-fields": true
    },
    "status": {
      "type": "object",
      "x-kubernetes-preserve-unknown-fields": true
    }
  },
  "required": [
    "apiVersion",
    "kind"
  ],
  "type": "object",
  "x-kubernetes-group-version-kind": [
    {
      "group": "clickhouse.altinity.com",
      "kind": "ClickHouseOperatorConfiguration",
      "version": "v1"
    }
  ],
  "x-kubernetes-preserve-unknown-fields": true
}